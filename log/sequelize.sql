Executing (default): SELECT 1+1 AS resultExecuting (default): CREATE TABLE IF NOT EXISTS "faculties" ("id"   SERIAL , "name" VARCHAR(256) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'faculties' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "departments" ("id"   SERIAL , "name" VARCHAR(256) NOT NULL, "facultyId" INTEGER NOT NULL REFERENCES "faculties" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "departmentId" INTEGER REFERENCES "faculties" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'departments' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_edu_programs_type' GROUP BY 1Executing (default): CREATE TABLE IF NOT EXISTS "edu_programs" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "code" VARCHAR(255) NOT NULL, "type" "public"."enum_edu_programs_type" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'edu_programs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "groups" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "eduProgramId" INTEGER NOT NULL REFERENCES "edu_programs" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "groupId" INTEGER REFERENCES "edu_programs" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'groups' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "lecturers" ("id"   SERIAL , "firstName" VARCHAR(256) NOT NULL, "lastName" VARCHAR(256) NOT NULL, "patronymic" VARCHAR(256) NOT NULL, "dateOfBirth" DATE NOT NULL, "photo" VARCHAR(255), "biography" VARCHAR(255), "departmentId" INTEGER NOT NULL REFERENCES "departments" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "headId" INTEGER REFERENCES "departments" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "curatorId" INTEGER REFERENCES "groups" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "deanId" INTEGER REFERENCES "faculties" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login" VARCHAR(64) NOT NULL, "en_password" VARCHAR(128) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'lecturers' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_subjects_certification' GROUP BY 1Executing (default): CREATE TABLE IF NOT EXISTS "subjects" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "lecturerId" INTEGER NOT NULL REFERENCES "lecturers" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "certification" "public"."enum_subjects_certification" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'subjects' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_schedules_dayOfWeek' GROUP BY 1Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_schedules_semester' GROUP BY 1Executing (default): CREATE TABLE IF NOT EXISTS "schedules" ("id"   SERIAL , "dayOfWeek" "public"."enum_schedules_dayOfWeek" NOT NULL, "time" TIME NOT NULL, "location" VARCHAR(255) NOT NULL, "year" INTEGER NOT NULL, "semester" "public"."enum_schedules_semester" NOT NULL, "subjectId" INTEGER NOT NULL REFERENCES "subjects" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "groupId" INTEGER NOT NULL REFERENCES "groups" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'schedules' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "students" ("id"   SERIAL , "firstName" VARCHAR(255) NOT NULL, "lastName" VARCHAR(255) NOT NULL, "patronymic" VARCHAR(255) NOT NULL, "dateOfBirth" DATE NOT NULL, "photo" VARCHAR(255), "departmentId" INTEGER NOT NULL REFERENCES "departments" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "groupId" INTEGER NOT NULL REFERENCES "groups" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "login" VARCHAR(255) NOT NULL, "en_password" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'students' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_attendance_logs_state' GROUP BY 1Executing (default): CREATE TABLE IF NOT EXISTS "attendance_logs" ("state" "public"."enum_attendance_logs_state" NOT NULL, "date" DATE NOT NULL, "scheduleId" INTEGER NOT NULL REFERENCES "schedules" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "studentId" INTEGER NOT NULL REFERENCES "students" ("id") ON DELETE NO ACTION ON UPDATE CASCADE);Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'attendance_logs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "rating_logs" ("studentId" INTEGER NOT NULL REFERENCES "students" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "subjectId" INTEGER NOT NULL REFERENCES "subjects" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "grade" INTEGER NOT NULL);Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'rating_logs' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "student_metrics" ("date" TIMESTAMP WITH TIME ZONE NOT NULL, "studentId" INTEGER NOT NULL REFERENCES "students" ("id") ON DELETE CASCADE ON UPDATE CASCADE);Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'student_metrics' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "tasks" ("id"   SERIAL , "description" VARCHAR(255) NOT NULL, "photo" VARCHAR(255), "test" VARCHAR(255), "begin" DATE NOT NULL, "deadline" DATE NOT NULL, "subjectId" INTEGER NOT NULL REFERENCES "subjects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "groupId" INTEGER NOT NULL REFERENCES "groups" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'tasks' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "task_results" ("file" VARCHAR(256), "grade" INTEGER, "studentId" INTEGER NOT NULL REFERENCES "students" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "taskId" INTEGER NOT NULL REFERENCES "tasks" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL);Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'task_results' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): SELECT "attendance_log"."state", "student"."id" AS "student.id", "student"."firstName" AS "student.firstName", "student"."lastName" AS "student.lastName", "student"."patronymic" AS "student.patronymic" FROM "attendance_logs" AS "attendance_log" LEFT OUTER JOIN "students" AS "student" ON "attendance_log"."studentId" = "student"."id" WHERE "attendance_log"."scheduleId" = '1' AND "attendance_log"."date" = '2020-10-01';